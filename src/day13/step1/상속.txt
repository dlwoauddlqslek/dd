상속
    - 부모로부터 자식이나 손자까지 물려주는 행위
    - 상위클래스가 하위클래스의 개념을 확장,세분화 하는 의미
    - 사용하는 이유
        1.유지보수 2.계층구조파악 3.재사용성 *4.다형성

    - 상속 선언하는 방법
        class 부모클래스명{}
        class 자식클래스명 extends 부모클래스명{}

    - 자식클래스는 부모클래스의 멤버변수, 메소드를 사용할 수 있다.
        단) 부모클래스는 자식클래스의 멤버변수, 메소드를 사용할 수 없다.

    - 타입변환
        - 자식타입 -> 부모타입으로 타입변환 가능
        - 부모타입 -> 자식타입으로 타입변환 불가능
            단) 본래의 객체가 자식타입에서 부모타입으로 변환된 부모타입 객체이면 가능
                - 동물(생성) , 동물 -> 닭 (불가능)
                - 닭(생성) , 닭 -> 동물 -> 닭 (가능)

            단) 형제관계는 불가능
                - 닭(생성) , 닭 -> 참새 (불가능)

    - 객체의 타입확인
        객체명 instanceOf 검사타입
        -- 해당 객체가 검사타입에 포함하는지 확인, 포함하면 true 아니면 false

    - super vs this
        super()                 : 부모 디폴트 생성자 호출
        super(매개변수,매개변수)   : 부모의 매개변수가 동일한 생성자 호출
        super.필드명             : 부모의 멤버변수 호출/접근
        this.필드명              : 본인의 멤버변수 호출/접근
        super.메소드명()         : 부모의 메소드를 호출/접근
        this.메소드명()          : 본인의 메소드를 호출/접근
        *super, this 생략시 동일한 명을 가진 멤버변수 혹은 메소드는 본인의 멤버변수/메소드 우선순위